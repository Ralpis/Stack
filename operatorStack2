#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stack>
#include "stackADT.h"

/* 가정 : 피연산자는 음이 아닌 정수 양의 정수이다.*/

static char OPERATORS[] = "+-*/";
static int PRECEDENCE[] = { 1,1,2,2 };

Stack operator_stack;

int precedence(char op);
int is_operator(char ch);
void handle_exception(const char *err_msg);
char *process_op(char op, char *pos);
char *convert(char *infix);


Stack operand_stack;

char *convert(char *infix) {
	operator_stack = create();
	
	char *postfix = (char *)malloc(strlen(infix) + 1);
	char *pos = postfix;
	char *token = strtok(infix, " ");
	while (token != NULL) {
		if (token[0] >= '0' &&token[0] <= '9') {
			printf(pos, "%s ", token);
			pos += (strlen(token) + 1);
		}
		else if (is_operator(token[0] > -1)) {
			pos = process_op(token[0], pos);
		}
		else {
			handle_exception("Syntax Error: invalid character encountered.");
		}
		token = strtok(NULL, " ");
	}
	while (!is_empty(operator_stack)) {
		char op = (char)pop(operator_stack);
		sprintf(pos, "%c ", op);
		pos += 2;
	}
	*pos = '\0';
	return postfix;
}

char *process_op(char op, char *pos) {
	if (is_empty(operator_stack)) {
		push(operator_stack, op);
	}
	else {
		char top_op = peek(operator_stack);
		if (precedence(op) > precedence(top_op)) {
			push(operator_stack, op);
		}
		else {
			while (!is_empty(operand_stack) && precedence(op) <= precedence(top_op)) {
				pop(operator_stack);
				sprintf(pos, "%c ", top_op);
				pos += 2;
				if (!is_empty(operator_stack)) {
					top_op=(char)peek(operator_stack);
				}
			}
			push(operator_stack,op);
		}
	}
	return pos;
}



int precedence(char op) {
	return PRECEDENCE[is_operator(op)];
}

int is_operator(char ch) {
	for (int i = 0; i < strlen(OPERATORS); i++) {
		if (OPERATORS[i] == ch) {
			return i;
		}
	}
	return -1;
}

void handle_exception(const char *err_msg) {
	printf("%s\n", err_msg);
	exit(1);
}


int main() {


}
